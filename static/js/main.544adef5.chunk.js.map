{"version":3,"sources":["containers/ELM327Container/ELM327Container.js","App.js","serviceWorker.js","index.js"],"names":["ELM327Container","global_service","global_device","interval","handleNotifyCharacteristic","characteristic","startNotifications","then","char","addEventListener","notify","e","value","target","received","TextDecoder","decode","console","log","Button","onClick","navigator","bluetooth","requestDevice","filters","name","optionalServices","device","gatt","connect","server","getPrimaryService","service","uuid","Promise","all","getCharacteristic","catch","error","message","setInterval","commandTosend","TextEncoder","encode","writeValue","variant","clearInterval","disconnect","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"kJA6FeA,EA3FS,WAEpB,IAIIC,EACAC,EAFAC,EAAW,KAqCTC,EAA6B,SAACC,GAChC,OAAOA,EAAeC,qBACjBC,MAAK,SAAAC,GACFH,EAAeI,iBAAiB,6BAA8BC,OAGpEA,EAAS,SAACC,GACZ,IACIC,EADiBD,EAAEE,OACID,MAEvBE,EADM,IAAIC,YAAY,QACPC,OAAOJ,GAE1BK,QAAQC,IAAIJ,IA2BhB,OACI,6BACI,kBAACK,EAAA,EAAD,CAAQC,QA3EA,WACZC,UAAUC,UAAUC,cAAc,CAC9BC,QAAS,CAAC,CACNC,KAAM,UAEVC,iBAAkB,CAXD,SAehBnB,MAAK,SAAAoB,GACF,OAAOA,EAAOC,KAAKC,aAEtBtB,MAAK,SAAAuB,GAKF,OAJA5B,EAAc4B,EAEdb,QAAQC,IAAR,iCAAsCY,EAAOH,OAAOF,OAE7CK,EAAOC,kBAvBD,UAyBhBxB,MAAK,SAAAyB,GAGF,OAFA/B,EAAiB+B,EACjBf,QAAQC,IAAR,sCAA2Cc,EAAQC,OAC5CC,QAAQC,IAAI,CACfH,EAAQI,kBA3BQ,wCA4BX7B,KAAKH,GACV4B,EAAQI,kBA9BQ,wCA+BX7B,YAGZ8B,OAAM,SAAAC,GACHrB,QAAQC,IAAIoB,EAAMC,cA6CtB,WACA,kBAACpB,EAAA,EAAD,CAAQC,QA5BF,WACVjB,EAAWqC,aAAY,WACnBvC,EAAemC,kBAvDS,wCAwDnB7B,MAAK,SAAAC,GACF,IAIIiC,EAJM,IAAIC,YAAY,QAIFC,OAAO/B,UAE/BJ,EAAKoC,WAAWH,MAEnBJ,OAAM,SAAA1B,SAGZ,MAayBkC,QAAS,WAAjC,SACA,kBAAC1B,EAAA,EAAD,CAAQC,QAZH,WACT0B,cAAc3C,IAWa0C,QAAS,UAAhC,QACA,kBAAC1B,EAAA,EAAD,CAAQC,QAVG,WACf0B,cAAc3C,GACdD,EAAc6C,cAQmBF,QAAS,aAAtC,gBC7EGG,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBpC,WACrBA,UAAUqC,cAAcC,MAAMpD,MAAK,SAAAqD,GACjCA,EAAaC,iB","file":"static/js/main.544adef5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button } from 'react-bootstrap'\r\nconst ELM327Container = () => {\r\n\r\n    const _primary_service = 0xfff0;\r\n    const _write_characteristic_uuid = `0000fff2-0000-1000-8000-00805f9b34fb`; //WRITE, WRITE-NO-RESPONSE\r\n    const _notify_characteristc_uuid = `0000fff1-0000-1000-8000-00805f9b34fb`; //READ, NOTIFY\r\n    var interval = null;\r\n    var global_service;\r\n    var global_device;\r\n    const connect = () => {\r\n        navigator.bluetooth.requestDevice({\r\n            filters: [{\r\n                name: 'OBDII'\r\n            }],\r\n            optionalServices: [\r\n                _primary_service\r\n            ]\r\n        })\r\n            .then(device => {\r\n                return device.gatt.connect();\r\n            })\r\n            .then(server => {\r\n                global_device=server;\r\n                \r\n                console.log(`Connected with device: ${server.device.name}`)\r\n\r\n                return server.getPrimaryService(_primary_service)\r\n            })\r\n            .then(service => {\r\n                global_service = service;\r\n                console.log(`Received service with UUID: ${service.uuid}`)\r\n                return Promise.all([\r\n                    service.getCharacteristic(_notify_characteristc_uuid)\r\n                        .then(handleNotifyCharacteristic),\r\n                    service.getCharacteristic(_write_characteristic_uuid)\r\n                        .then()\r\n                ]);\r\n            })\r\n            .catch(error => {\r\n                console.log(error.message);\r\n            })\r\n    }\r\n\r\n    const handleNotifyCharacteristic = (characteristic) => {\r\n        return characteristic.startNotifications()\r\n            .then(char => {\r\n                characteristic.addEventListener('characteristicvaluechanged', notify)\r\n            })\r\n    }\r\n    const notify = (e) => {\r\n        let characteristic = e.target;\r\n        let value = characteristic.value;\r\n        var dec = new TextDecoder('utf8'); // decode a string\r\n        let received = dec.decode(value);\r\n\r\n        console.log(received)\r\n    }\r\n    const start = () => {\r\n        interval = setInterval(() => {\r\n            global_service.getCharacteristic(_write_characteristic_uuid)\r\n                .then(char => {\r\n                    var enc = new TextEncoder('utf8'); // encode a string\r\n                    let value = '010C'\r\n                    // command = value;\r\n                    // previousResponse = '';\r\n                    let commandTosend = enc.encode(value + '\\r');\r\n\r\n                    char.writeValue(commandTosend);\r\n                })\r\n                .catch(e=>{\r\n                    ;\r\n                })\r\n        }, 300)\r\n    }\r\n    const stop = ()=>{\r\n        clearInterval(interval);\r\n    }   \r\n    const disconnect = ()=>{\r\n        clearInterval(interval);\r\n        global_device.disconnect();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={connect}>Connect</Button>\r\n            <Button onClick={start} variant={\"success\"}>START</Button>\r\n            <Button onClick={stop} variant={\"danger\"}>STOP</Button>\r\n            <Button onClick={disconnect} variant={\"secondary\"}>DISCONNECT</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ELM327Container;","import React from 'react';\nimport ELM327Container from './containers/ELM327Container/ELM327Container';\n\nfunction App() {\n  return (\n    <div>\n      <ELM327Container/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}